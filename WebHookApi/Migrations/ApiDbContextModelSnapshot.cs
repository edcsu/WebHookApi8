// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebHookApi.Persistence;

#nullable disable

namespace WebHookApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebHookApi.Domain.Events.DomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WebHookApi.Domain.Models.WebHook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("HookEvents")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastTrigger")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("WebHookUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("WebHooks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13d97a50-02d7-48cb-b215-fc9c5d9cb638"),
                            ContentType = "application/json",
                            HookEvents = new[] { 0 },
                            IsActive = true,
                            WebHookUrl = "https://localhost:5015/hookloopback"
                        });
                });

            modelBuilder.Entity("WebHookApi.Domain.Models.WebHookRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HookType")
                        .HasColumnType("integer");

                    b.Property<string>("RequestBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestHeaders")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WebHookId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WebHookId");

                    b.ToTable("WebHooksHistory");
                });

            modelBuilder.Entity("WebHookApi.Domain.WebHooks.WebHookHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WebHookId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WebHookId");

                    b.ToTable("WebHookHeader");
                });

            modelBuilder.Entity("WebHookApi.Domain.Events.WebHookCreated", b =>
                {
                    b.HasBaseType("WebHookApi.Domain.Events.DomainEvent");

                    b.Property<Guid>("WebHookId")
                        .HasColumnType("uuid");

                    b.ToTable("WebHookCreatedEvent", (string)null);
                });

            modelBuilder.Entity("WebHookApi.Domain.Events.WebHookRemoved", b =>
                {
                    b.HasBaseType("WebHookApi.Domain.Events.DomainEvent");

                    b.Property<Guid>("WebHookId")
                        .HasColumnType("uuid");

                    b.ToTable("WebHookRemovedEvent", (string)null);
                });

            modelBuilder.Entity("WebHookApi.Domain.Events.WebHookUpdated", b =>
                {
                    b.HasBaseType("WebHookApi.Domain.Events.DomainEvent");

                    b.Property<Guid>("WebHookId")
                        .HasColumnType("uuid");

                    b.ToTable("WebHookUpdatedEvent", (string)null);
                });

            modelBuilder.Entity("WebHookApi.Domain.Models.WebHookRecord", b =>
                {
                    b.HasOne("WebHookApi.Domain.Models.WebHook", "WebHook")
                        .WithMany("Records")
                        .HasForeignKey("WebHookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebHook");
                });

            modelBuilder.Entity("WebHookApi.Domain.WebHooks.WebHookHeader", b =>
                {
                    b.HasOne("WebHookApi.Domain.Models.WebHook", "WebHook")
                        .WithMany("Headers")
                        .HasForeignKey("WebHookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebHook");
                });

            modelBuilder.Entity("WebHookApi.Domain.Events.WebHookCreated", b =>
                {
                    b.HasOne("WebHookApi.Domain.Events.DomainEvent", null)
                        .WithOne()
                        .HasForeignKey("WebHookApi.Domain.Events.WebHookCreated", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebHookApi.Domain.Events.WebHookRemoved", b =>
                {
                    b.HasOne("WebHookApi.Domain.Events.DomainEvent", null)
                        .WithOne()
                        .HasForeignKey("WebHookApi.Domain.Events.WebHookRemoved", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebHookApi.Domain.Events.WebHookUpdated", b =>
                {
                    b.HasOne("WebHookApi.Domain.Events.DomainEvent", null)
                        .WithOne()
                        .HasForeignKey("WebHookApi.Domain.Events.WebHookUpdated", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebHookApi.Domain.Models.WebHook", b =>
                {
                    b.Navigation("Headers");

                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
